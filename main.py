# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'task4.ui'
#
# Created by: PyQt5 UI code generator 5.15.5
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
from numpy.polynomial import Polynomial as P
from logging import error
import math
from math import ceil, inf
from PyQt5 import QtCore, QtGui, QtWidgets
import numpy as np
from numpy.core.fromnumeric import size
import pandas as pd
from pyqtgraph.widgets.PlotWidget import PlotWidget
import pyqtgraph as pg
from scipy import interpolate
from scipy import signal
from matplotlib.figure import Figure
from matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg
from scipy.fftpack.basic import fft
import seaborn as sns
import matplotlib.pyplot as plt
from PyQt5.QtWidgets import QApplication, QDialog, QProgressBar, QPushButton
from PyQt5.QtCore import Qt, QThread, pyqtSignal
import time

#Thread class
class MyThread(QThread):
    change_value = pyqtSignal(int)
    def run(self):
        cnt = 0
        while cnt < 100:
            cnt+=1
            #time.sleep(0.00001)
            self.change_value.emit(cnt)


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1020, 650)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.verticalLayoutWidget = QtWidgets.QWidget(self.centralwidget)
        self.verticalLayoutWidget.setGeometry(QtCore.QRect(130, 430, 311, 80))
        self.verticalLayoutWidget.setObjectName("verticalLayoutWidget")
        self.verticalLayout_Sliders = QtWidgets.QVBoxLayout(self.verticalLayoutWidget)
        self.verticalLayout_Sliders.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_Sliders.setObjectName("verticalLayout_Sliders")
        self.horizontalSlider_extrapolationPercentage = QtWidgets.QSlider(self.verticalLayoutWidget)
        self.horizontalSlider_extrapolationPercentage.setOrientation(QtCore.Qt.Horizontal)
        self.horizontalSlider_extrapolationPercentage.setObjectName("horizontalSlider_extrapolationPercentage")
        self.horizontalSlider_extrapolationPercentage.setMinimum(1)
        self.horizontalSlider_extrapolationPercentage.setMaximum(5)
        self.horizontalSlider_extrapolationPercentage.setValue(0)
        self.horizontalSlider_extrapolationPercentage.setTickInterval(1)
        self.horizontalSlider_extrapolationPercentage.setSingleStep(1)
        self.horizontalSlider_extrapolationPercentage.setTickPosition(QtWidgets.QSlider.TicksBelow)
        self.horizontalSlider_extrapolationPercentage.valueChanged.connect(lambda: self.extrapolation_change())

        self.verticalLayout_Sliders.addWidget(self.horizontalSlider_extrapolationPercentage)
        self.horizontalSlider_Chunks = QtWidgets.QSlider(self.verticalLayoutWidget)
        self.horizontalSlider_Chunks.setOrientation(QtCore.Qt.Horizontal)
        self.horizontalSlider_Chunks.setObjectName("horizontalSlider_Chunks")
        self.verticalLayout_Sliders.addWidget(self.horizontalSlider_Chunks)
        self.horizontalSlider_Chunks.setMinimum(1)
        self.horizontalSlider_Chunks.setMaximum(25)
        self.horizontalSlider_Chunks.setValue(0)
        self.horizontalSlider_Chunks.setTickInterval(1)
        self.horizontalSlider_Chunks.setSingleStep(1)
        self.horizontalSlider_Chunks.setTickPosition(QtWidgets.QSlider.TicksBelow)
        self.horizontalSlider_Chunks.valueChanged.connect(lambda: self.chunk_change())

        self.horizontalSlider_fittingOrder = QtWidgets.QSlider(self.verticalLayoutWidget)
        self.horizontalSlider_fittingOrder.setOrientation(QtCore.Qt.Horizontal)
        self.horizontalSlider_fittingOrder.setObjectName("horizontalSlider_fittingOrder")
        self.verticalLayout_Sliders.addWidget(self.horizontalSlider_fittingOrder)
        self.horizontalSlider_fittingOrder.setMinimum(1)
        self.horizontalSlider_fittingOrder.setMaximum(25)
        self.horizontalSlider_fittingOrder.setValue(0)
        self.horizontalSlider_fittingOrder.setTickInterval(1)
        self.horizontalSlider_fittingOrder.setSingleStep(1)
        self.horizontalSlider_fittingOrder.setTickPosition(QtWidgets.QSlider.TicksBelow)
        self.horizontalSlider_fittingOrder.valueChanged.connect(lambda: self.orderchange())
        self.label_eqn = QtWidgets.QLabel(self.centralwidget)
        self.label_eqn.setGeometry(QtCore.QRect(200, 10, 1000, 41))
        self.label_eqn.setObjectName("label_eqn")
        self.splitter_AllGraphs = QtWidgets.QSplitter(self.centralwidget)
        self.splitter_AllGraphs.setGeometry(QtCore.QRect(80, 60, 900, 350)) #ghyaro feh hyghyar mkan el graph el arkam di mabd2ya.
        # tartebhom: x-coordinate, ycoordinate, width , height
        # QRect(int x, int y, int width, int height)
        self.splitter_AllGraphs.setOrientation(QtCore.Qt.Horizontal)
        self.splitter_AllGraphs.setObjectName("splitter_AllGraphs")
        self.graphicsView_main = PlotWidget(self.splitter_AllGraphs)
        self.graphicsView_main.setStyleSheet("background: rgb(255,255,255)")
        self.graphicsView_main.setObjectName("graphicsView_main")
        self.graphicsView_main.setTitle("Main Graph")
        self.splitter_AllGraphs.addWidget(self.graphicsView_main)
        self.widget_SliderLabels = QtWidgets.QWidget(self.centralwidget)
        self.widget_SliderLabels.setGeometry(QtCore.QRect(10, 430, 115, 81))
        self.widget_SliderLabels.setObjectName("widget_SliderLabels")
        self.verticalLayout_SlidersLabels = QtWidgets.QVBoxLayout(self.widget_SliderLabels)
        self.verticalLayout_SlidersLabels.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_SlidersLabels.setObjectName("verticalLayout_SlidersLabels")

        self.errormap = QtWidgets.QPushButton(self.centralwidget)
        self.errormap.setGeometry(QtCore.QRect(520, 520, 500, 28))
        self.errormap.setObjectName("errormap")
        self.errormap.clicked.connect(lambda: self.error_map())


        self.progressBar = QtWidgets.QProgressBar(self.centralwidget)
        self.progressBar.setGeometry(QtCore.QRect(520, 570, 501, 23))
        self.progressBar.setObjectName("progressBar")
        self.progressBar.setMinimum(0)
        self.progressBar.setMaximum(100)
        self.progressBar.hide()
        self.errormap.clicked.connect(lambda: self.start_progress_bar())


        self.label_extrapolation = QtWidgets.QLabel(self.widget_SliderLabels)
        self.label_extrapolation.setObjectName("label_extrapolation")
        self.verticalLayout_SlidersLabels.addWidget(self.label_extrapolation)
        self.label_no_chunks = QtWidgets.QLabel(self.widget_SliderLabels)
        self.label_no_chunks.setObjectName("label_no_chunks")
        self.verticalLayout_SlidersLabels.addWidget(self.label_no_chunks)
        self.label_order = QtWidgets.QLabel(self.widget_SliderLabels)
        self.label_order.setObjectName("label_order")
        self.verticalLayout_SlidersLabels.addWidget(self.label_order)
        self.widget_axisLabels = QtWidgets.QWidget(self.centralwidget)
        self.widget_axisLabels.setGeometry(QtCore.QRect(520, 430, 51, 81))
        self.widget_axisLabels.setObjectName("widget_axisLabels")
        self.verticalLayout_axisLabels = QtWidgets.QVBoxLayout(self.widget_axisLabels)
        self.verticalLayout_axisLabels.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_axisLabels.setObjectName("verticalLayout_axisLabels")
        self.label_xAxis = QtWidgets.QLabel(self.widget_axisLabels)
        self.label_xAxis.setObjectName("label_xAxis")
        self.verticalLayout_axisLabels.addWidget(self.label_xAxis)
        self.label_yAxis = QtWidgets.QLabel(self.widget_axisLabels)
        self.label_yAxis.setObjectName("label_yAxis")
        self.verticalLayout_axisLabels.addWidget(self.label_yAxis)
        self.widget_comboBoxes = QtWidgets.QWidget(self.centralwidget)
        self.widget_comboBoxes.setGeometry(QtCore.QRect(580, 437, 241, 71))
        self.widget_comboBoxes.setObjectName("widget_comboBoxes")
        self.verticalLayout_comboBoxes = QtWidgets.QVBoxLayout(self.widget_comboBoxes)
        self.verticalLayout_comboBoxes.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_comboBoxes.setObjectName("verticalLayout_comboBoxes")
        self.comboBox_X = QtWidgets.QComboBox(self.widget_comboBoxes)
        self.comboBox_X.setObjectName("comboBox_X")
        self.verticalLayout_comboBoxes.addWidget(self.comboBox_X)
        self.comboBox_X.addItem("Order of polynomial")
        self.comboBox_X.addItem("no. of chunks")
        self.comboBox_X.addItem("Over lapping")
        self.comboBox_Y = QtWidgets.QComboBox(self.widget_comboBoxes)
        self.comboBox_Y.setObjectName("comboBox_Y")
        self.verticalLayout_comboBoxes.addWidget(self.comboBox_Y)
        self.comboBox_Y.addItem("Order of polynomial")
        self.comboBox_Y.addItem("no. of chunks")
        self.comboBox_Y.addItem("Over lapping")

        self.widget_comboBoxesLabels = QtWidgets.QWidget(self.centralwidget)
        self.widget_comboBoxesLabels.setGeometry(QtCore.QRect(830, 444, 130, 61))
        self.widget_comboBoxesLabels.setObjectName("widget_comboBoxesLabels")
        self.verticalLayout_comboBoxesLabels = QtWidgets.QVBoxLayout(self.widget_comboBoxesLabels)
        self.verticalLayout_comboBoxesLabels.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_comboBoxesLabels.setObjectName("verticalLayout_comboBoxesLabels")
        self.label_no_of_chuncks = QtWidgets.QLabel(self.widget_comboBoxesLabels)
        self.label_no_of_chuncks.setObjectName("label_no_of_chuncks")
        self.verticalLayout_comboBoxesLabels.addWidget(self.label_no_of_chuncks)
        self.label_Polynomial_order = QtWidgets.QLabel(self.widget_comboBoxesLabels)
        self.label_Polynomial_order.setObjectName("label_Polynomial_order")
        self.verticalLayout_comboBoxesLabels.addWidget(self.label_Polynomial_order)
        self.label_overlapping = QtWidgets.QLabel(self.widget_comboBoxesLabels)
        self.label_overlapping.setObjectName("label_overlapping")
        self.verticalLayout_comboBoxesLabels.addWidget(self.label_overlapping)

        self.widget_textBoxes = QtWidgets.QWidget(self.centralwidget)
        self.widget_textBoxes.setGeometry(QtCore.QRect(960, 444, 50, 61))
        self.widget_textBoxes.setObjectName("widget_textBoxes")
        self.verticalLayout_textBoxes = QtWidgets.QVBoxLayout(self.widget_textBoxes)
        self.verticalLayout_textBoxes.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_textBoxes.setObjectName("verticalLayout_textBoxes")
        self.Text_chuncks = QtWidgets.QLineEdit(self.widget_textBoxes)
        self.Text_chuncks.setObjectName("Text_chuncks")
        self.verticalLayout_textBoxes.addWidget(self.Text_chuncks)
        self.Text_order = QtWidgets.QLineEdit(self.widget_textBoxes)
        self.Text_order.setObjectName("Text_order")
        self.verticalLayout_textBoxes.addWidget(self.Text_order)
        self.Text_overlapping = QtWidgets.QLineEdit(self.widget_textBoxes)
        self.Text_overlapping.setObjectName("Text_overlapping")
        self.verticalLayout_textBoxes.addWidget(self.Text_overlapping)

        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 833, 21))
        self.menubar.setObjectName("menubar")
        self.menufile = QtWidgets.QMenu(self.menubar)
        self.menufile.setObjectName("menufile")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.actionopen = QtWidgets.QAction(MainWindow)
        self.actionopen.setObjectName("actionopen")
        self.actionopen.triggered.connect(lambda: self.open_file())
        self.menufile.addAction(self.actionopen)
        self.menubar.addAction(self.menufile.menuAction())
        self.comboBox = QtWidgets.QComboBox(self.centralwidget)
        self.comboBox.setGeometry(QtCore.QRect(720, 18, 30, 30))
        self.comboBox.setObjectName("comboBox")
        self.comboBox.addItem('1')
        self.comboBox.currentIndexChanged.connect(lambda: self.latex_eqn(self.slider_order_val))
        
        self.pen_blue = pg.mkPen((0,0,255), width=2, style=QtCore.Qt.DotLine)

        
        self.frame_graph = QtWidgets.QFrame(self.centralwidget)
        self.frame_graph.setGeometry(QtCore.QRect(20, 10, 700, 50))
        self.frame_graph.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_graph.setFrameShadow(QtWidgets.QFrame.Raised)
        self.LAYOUT_Graph = QtWidgets.QGridLayout()
        self.frame_graph.setLayout(self.LAYOUT_Graph)

        self.frame_errormap = QtWidgets.QFrame(self.centralwidget)
        self.frame_errormap.setGeometry(QtCore.QRect(750, 10, 230, 50))
        self.frame_errormap.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_errormap.setFrameShadow(QtWidgets.QFrame.Raised)
        self.LAYOUT_Errormap = QtWidgets.QGridLayout()
        self.frame_errormap.setLayout(self.LAYOUT_Errormap)

        self.bool_heatmap = 0
        self.fig = Figure()
        self.canvas = FigureCanvasQTAgg(self.fig)
        self.LAYOUT_Graph.addWidget(self.canvas, *(0, 1))
        # self.verticalLayout_4.addWidget(self.canvas)
        self.fig.clear()

        self.fig_error = Figure()
        self.canvas_error = FigureCanvasQTAgg(self.fig_error)
        self.LAYOUT_Errormap.addWidget(self.canvas_error, *(0, 1))
        # self.verticalLayout_4.addWidget(self.canvas)
        self.fig_error.clear()

        self.chunk_size=1000
        self.slider_order_val = 1
        self.retranslateUi(MainWindow)
        self.slider_chunk_val = 1
        self.extrapolation_sliderval = 1
        self.extrapolation_pecentage = 100
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.label_eqn.setText(_translate("MainWindow", ""))
        self.label_extrapolation.setText(_translate("MainWindow", "Extrapolation Efficiency"))
        self.label_no_chunks.setText(_translate("MainWindow", "Number of chunks "))
        self.label_order.setText(_translate("MainWindow", "Fitting Order "))
        self.label_xAxis.setText(_translate("MainWindow", "X_Axis "))
        self.label_yAxis.setText(_translate("MainWindow", "Y_Axis"))
        self.label_no_of_chuncks.setText(_translate("MainWindow", "Number of chuncks"))
        self.label_Polynomial_order.setText(_translate("MainWindow", "Polynomial Order"))
        self.label_overlapping.setText(_translate("MainWindow", "Overlapping Precentage"))
        self.errormap.setText(_translate("MainWindow", "Generate error map"))
        self.menufile.setTitle(_translate("MainWindow", "file "))
        self.actionopen.setText(_translate("MainWindow", "open"))

    def extrapolation_change(self):
        self.horizontalSlider_Chunks.setValue(0)
        self.chunk_size = 1000
        self.slider_chunk_val=1
        self.extrapolation_sliderval = self.horizontalSlider_extrapolationPercentage.value()
        val = self.extrapolation_sliderval-1
        self.extrapolation_pecentage = 100-val*10
        self.plotting_data(self.slider_order_val)

    def open_file(self):
        self.fileName, _ = QtWidgets.QFileDialog.getOpenFileName(None, 'Open csv', QtCore.QDir.rootPath(), 'csv(*.csv)')
        self.data_set = pd.read_csv(self.fileName, header=None)
        self.data_amplitude = self.data_set[1]
        self.x_axis_data = self.data_set[0]
        # chunksize=self.chunk_size)
        # self.read_data()
        #self.fig.suptitle('$a_1\cdot x+a_0$', x=0.0, y=0.5, horizontalalignment='left', verticalalignment='center')
        self.canvas.draw()
        self.Get_max_freq()
        self.plotting_data(self.slider_order_val)


    def Get_max_freq(self):
        data_amp=[]
        n=size(self.data_amplitude)

        for i in self.data_amplitude:
            if len(data_amp)== len(self.x_axis_data):
                break
            else:
                data_amp.append(i)

        frequencies_array=np.arange(1,n/2,dtype ='int')
        data_freq=fft(data_amp)
        freq_mag=(2/n)*abs(data_freq[0:np.size(frequencies_array)])

        imp_freq=freq_mag>0.2
        clean_frequencies_array=imp_freq*frequencies_array
        self.fmax=round(clean_frequencies_array.max())

    def plotting_data(self,order_val):
        if self.fmax == 0:
            self.graphicsView_main.clear()
            self.graphicsView_main.plot(self.x_axis_data,self.data_amplitude)
        else:
            self.graphicsView_main.clear()
            self.graphicsView_main.plotItem.vb.setLimits(xMin=min(self.x_axis_data)-0.01, xMax=max(self.x_axis_data),yMin=min(self.data_amplitude) - 0.2, yMax=max(self.data_amplitude) + 0.2)
            self.graphicsView_main.plot(self.x_axis_data,self.data_amplitude)
            self.interpolate_the_curve(order_val)

    def interpolate_the_curve(self,interpol_order):
        #sampling_rate=int(2.5*self.fmax)
        #sample_time = 1/sampling_rate
        #no_of_samples = int(max(self.x_axis_data)/sample_time)
        self.chunk_coeffs = []
        self.residuals = []
        for i in range(0,len(self.x_axis_data)-1,self.chunk_size):
            data = []
            t = []
            ind = i
            for j in range(self.chunk_size-1):
                if ind < len(self.x_axis_data):
                    data.append(self.data_amplitude[ind])
                    t.append(self.x_axis_data[ind])
                    ind += 1
            extrapolation_fraction = self.extrapolation_pecentage/100
            interpol_range = int(extrapolation_fraction*(self.chunk_size-1))
            self.coeffs,res, _, _, _= np.polyfit(t[0:interpol_range], data[0:interpol_range], interpol_order, full=True)
            # self.coeffs = np.array(self.coeffs,dtype=object)
            if res.size != 0:
                self.residuals.append(res[0])
            self.chunk_coeffs.append(self.coeffs)

            p = np.poly1d(self.coeffs)
            self.graphicsView_main.plot(t,p(t),pen = self.pen_blue)

    def interpolate(self,interpol_order,chunk):
        sampling_rate=int(2.5*self.fmax)
        sample_time = 1/sampling_rate
        no_of_samples = int(max(self.x_axis_data)/sample_time)
        for i in range(0,len(self.x_axis_data)-1,chunk):
            data = []
            t = []
            ind = i
            for j in range(chunk-1):
                if ind < len(self.x_axis_data):
                    data.append(self.data_amplitude[ind])
                    t.append(self.x_axis_data[ind])
                    ind += 1
            self.Sample_amp,self.Sample_time = signal.resample(data,no_of_samples,t)
            z = np.polyfit(self.Sample_time, self.Sample_amp, interpol_order)
            # tck = interpolate.splrep(self.Sample_time, self.Sample_amp, s=0,k=interpol_order)
            p = np.poly1d(z)
            y = p(t)
            return p 

    def orderchange(self):
        self.slider_order_val = int(self.horizontalSlider_fittingOrder.value())
        self.plotting_data(self.slider_order_val)
        self.latex_eqn(self.slider_order_val)

    def chunk_change(self):
        self.comboBox.clear()
        self.slider_chunk_val = self.horizontalSlider_Chunks.value()
        self.chunk_size = ceil(1000 / self.slider_chunk_val)
        self.plotting_data(self.slider_order_val)
        for i in range(self.slider_chunk_val):
            self.comboBox.addItem(str(self.slider_chunk_val - i))

    def latex_eqn(self, slider_order_val):
        if self.slider_order_val<7 and self.slider_chunk_val<9:
            chunck_no = self.comboBox.currentIndex()
            coeffs = self.chunk_coeffs[chunck_no]
            res = self.residuals[chunck_no]
            eqn = []
            order = slider_order_val
            for i in range(slider_order_val - 1):
                eq1 = '{}\cdot x^{}'.format(ceil(coeffs[i]), order)
                order -= 1
                eqn.append(eq1)
            equation = ''
            for eq in eqn:
                equation = equation + eq + ' + '
            latex_eqn = '$y=' + equation + '{}\cdot x'.format(ceil(coeffs[slider_order_val - 1])) + '+'+'{}\cdot$'.format(
                round(coeffs[slider_order_val],2))
            if len(self.residuals) != 0:
                res = self.residuals[chunck_no]
                error = math.sqrt(res)
                error_latex = '$Error = {} \%$ '.format(round(error*100,1))
                self.fig_error.suptitle(error_latex, x=0.0, y=0.5, horizontalalignment='left', verticalalignment='center')
                self.canvas_error.draw()
            self.fig.suptitle(latex_eqn, x=0.0, y=0.5, horizontalalignment='left', verticalalignment='center')
            self.canvas.draw()


        else:
            self.fig.suptitle('', x=0.0, y=0.5, horizontalalignment='left', verticalalignment='center')
            self.canvas.draw()

    def get_error(self,x,y,i):
        # self.coeffs, res, _, _, _ = np.polyfit(t[0:interpol_range], data[0:interpol_range], interpol_order, full=True)
        z_chunk1, res, _, _, _ = np.polyfit(x, y, i, full=True)
        avgerror =math.sqrt(res[0])
        return(avgerror)

    def calculate_chuncks(self,Array_A,no_chunks,overlap_per):
        size = int(1000 / no_chunks)
        step = int(overlap_per * size)
        Array_A = [Array_A[i: i + size] for i in range(0, len(Array_A), step)]
        return Array_A

    def toggle_errormap (self, fig):
        if self.bool_heatmap == 0:
            self.canvas1 = FigureCanvasQTAgg(fig)
            self.splitter_AllGraphs.addWidget(self.canvas1)
            self.bool_heatmap = 1
        else:
            self.canvas1.hide()
            self.canvas1 = FigureCanvasQTAgg(fig)
            self.splitter_AllGraphs.addWidget(self.canvas1)


    def error_map(self):

        if self.errormap.text() != "Generate error map":
            self.progressBar.hide()
            self.errormap.setText("Generate error map")
            if self.bool_heatmap == 1:
                self.canvas1.hide()
            return

        self.errormap.setText("Cancel")
        self.progressBar.show()

        comboX = self.comboBox_X.currentIndex()
        comboY = self.comboBox_Y.currentIndex()

        if self.Text_chuncks.text() == "":
            no_chuncks = 5
        else:
            no_chuncks = int(self.Text_chuncks.text())
        
        if self.Text_chuncks.text() == "":
            degree_value = 5
        else:
            degree_value = int(self.Text_order.text())
        
        if self.Text_chuncks.text() == "":
            overlapping = 0.75
            overlaprange = 5
        else:
            overlapping = 1 - int(self.Text_overlapping.text()) /100
            overlaprange = overlapping


        chunck_label = list(map(str, range(1, no_chuncks + 1)))
        degree_label = list(map(str, range(1, degree_value + 1)))
        overlapping_label = [f"{overlapping_index}%" for overlapping_index in range(5, int(overlaprange*5+5), 5)]

        overlapping_values, overlap = [], 1
        while overlap > overlapping:
            overlap -= .05
            overlapping_values.append(overlap)


        if (comboX == 0 and comboY == 1) or  (comboX == 1 and comboY == 0) :
            matrix1 = []
            for i in range(1, no_chuncks+1):
                matrix1.append([])
                for j in range(degree_value):
                        X_ErrorMap = self.calculate_chuncks(self.x_axis_data, i, overlapping)
                        Y_ErrorMap = self.calculate_chuncks(self.data_amplitude, i, overlapping)
                        errors = []
                        for k in range(i):
                            x_map_val = X_ErrorMap[k]
                            y_map_val = Y_ErrorMap[k]
                            error_x = self.get_error(x_map_val,y_map_val,j)
                            errors.append(error_x)
                        matrix1[i-1].append(np.average(errors))

            matrix1 = np.array(matrix1)[::-1]


            if comboX == 1 and comboY == 0:
                matrix1=matrix1.T
                fig, self.ax = plt.subplots(figsize=(1, 1))
                self.ax = sns.heatmap(matrix1 , xticklabels=chunck_label, yticklabels=degree_label[::-1])
            else:
                fig, self.ax = plt.subplots(figsize=(1, 1))
                self.ax = sns.heatmap(matrix1 , xticklabels=degree_label, yticklabels=chunck_label[::-1])

            self.toggle_errormap(fig)


        elif (comboX == 0 and comboY == 2) or (comboX == 2 and comboY == 0) :
            matrix2=[]

            for i in range(degree_value):
                matrix2.append([])
                for j in range(len(overlapping_values)):
                        X_Error_Map = self.calculate_chuncks(self.x_axis_data,no_chuncks,overlapping_values[j])
                        Y_Error_Map = self.calculate_chuncks(self.data_amplitude,no_chuncks,overlapping_values[j])
                        x1_map_val,y1_map_val= X_Error_Map[0],Y_Error_Map[0]
                        x2_map_val,y2_map_val = X_Error_Map[1],Y_Error_Map[1]
                        error_x1 = self.get_error(x1_map_val,y1_map_val,i)
                        error_x2 = self.get_error(x2_map_val,y2_map_val,i)
                        matrix2[i].append((error_x1+error_x2)/2)
            matrix2 = np.array(matrix2)[::-1]

            if comboX == 2 and comboY == 0:
                matrix2=matrix2.T
                fig, self.ax = plt.subplots(figsize=(1, 1))
                self.ax = sns.heatmap(matrix2 , xticklabels=overlapping_label, yticklabels=degree_label[::-1])
            else:
                fig, self.ax = plt.subplots(figsize=(1, 1))
                self.ax = sns.heatmap(matrix2 , xticklabels=degree_label, yticklabels=overlapping_label[::-1])

            self.toggle_errormap(fig)


        elif (comboX == 1 and comboY == 2) or  (comboX == 2 and comboY == 1):

            matrix3 = []
            for i in range(1,no_chuncks+1):
                matrix3.append([])
                for j in range(len(overlapping_values)):
                        X_Error_Map = self.calculate_chuncks(self.x_axis_data, i, overlapping_values[j])
                        Y_Error_Map = self.calculate_chuncks(self.data_amplitude, i, overlapping_values[j])
                        errors = []
                        for k in range(i):
                            x_error_val = X_Error_Map[k]
                            y_error_val = Y_Error_Map[k]
                            error_x = self.get_error(x_error_val,y_error_val,degree_value)
                            errors.append(error_x)
                        matrix3[i-1].append(np.average(errors))
            matrix3 = np.array(matrix3)[::-1]

            if (comboX == 2 and comboY == 1):
                matrix3 = matrix3.T
                fig, self.ax = plt.subplots(figsize=(1, 1))
                self.ax = sns.heatmap(matrix3.T, xticklabels=overlapping_label, yticklabels=chunck_label[::-1])
            else:
                fig, self.ax = plt.subplots(figsize=(1, 1))
                self.ax = sns.heatmap(matrix3.T, xticklabels=chunck_label, yticklabels=overlapping_label[::-1])

            self.toggle_errormap(fig)

        else:
            self.progressBar.hide()
            print("You can't get The error map between the same values")
            self.errormap.setText("Generate error map")




    def start_progress_bar(self):
         self.thread = MyThread()
         self.thread.change_value.connect(self.set_progress_val)
         self.thread.start()


    def set_progress_val(self, val):
         self.progressBar.setValue(val)



if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
